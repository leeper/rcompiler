#!/bin/bash
# @configure_input@

#setenv Rplain /local/software/other-R/R-2.4.0/bin/R
#setenv Rnan   /local/software/other-R/R-2.4.0-nan-optimization/bin/R
#setenv Rmod   /local/software/other-R/R-2.4.0-mod-optimization/bin/R

Rorig=/home/garvin/research/R-unmodified/R-2.1.1/bin/R
Rplain=/home/garvin/research/rcompiler-install/R-2.1.1/bin/R
Rnew=/home/garvin/research/rcompiler-install/R-new/bin/R

export PATH=@RCC_BIN_PATH@:${PATH}
export RCC_R_INCLUDE_PATH=@RCC_R_INCLUDE_PATH@
TIMECMD=/usr/bin/time

OPT=''
N_TIMES=1

if [[ $1 == 'full' ]] ; then
    OPT=$1
    shift
fi

if [[ $1 == '-n' ]] ; then
    shift
    N_TIMES=$1
    shift
fi

for f in $* ; do
    echo --- $f ---
    echo "  running and timing $f with the original R interpreter 2.1.1..."
    for (( i=0 ; $i < $N_TIMES ; i=$i+1 )) ; do $TIMECMD ${Rorig} --vanilla --slave < $f >  `basename $f .r`.interpreted.orig ; done
#    ${Rorig} CMD Rprof Rprof.out | grep "^Total run time"
    echo "  running and timing $f with the modified R interpreter 2.1.1..."
    for (( i=0 ; $i < $N_TIMES ; i=$i+1 )) ; do $TIMECMD ${Rplain} --vanilla --slave < $f >  `basename $f .r`.interpreted.plain ; done
#    ${Rplain} CMD Rprof Rprof.out | grep "^Total run time"
    echo "  running and timing $f with R interpreter 2.10.1..."
    for (( i=0 ; $i < $N_TIMES ; i=$i+1 )) ; do $TIMECMD ${Rnew} --vanilla --slave < $f >  `basename $f .r`.interpreted.new ; done
    if [[ $OPT == 'full' ]] ; then
	for f1 in no-for-loop-range-deforestation for-loop-range-deforestation ; do
	    for f2 in no-subscript-assignment subscript-assignment ; do
		for f3 in no-strictness strictness ; do
		    for f4 in no-call-graph call-graph ; do
			for f5 in no-lookup-elimination lookup-elimination ; do
			    echo "  compiling $f with rcc -f $f1 -f $f2 -f $f3 -f $f4 -f $f5 ..."
			    rcc -f $f1 -f $f2 -f $f3 -f $f4 -f $f5 $f
			    echo "  compiling " `basename $f .r`.c "with rcc-cc..."
			    rcc-cc -o `basename $f .r` -g `basename $f .r`.c
			    echo "  running " `basename $f .r` "with rcc-run..." 
			    repeat $N_TIMES $TIMECMD rcc-run `basename $f .r` >  `basename $f .r`.compiled
			done
		    done
		done
	    done
	done
    else
	echo "  compiling $f with rcc ..."
	rcc $f
	echo "  compiling" `basename $f .r`.c "with rcc-cc..."
	rcc-cc -o `basename $f .r` -g `basename $f .r`.c
	echo "  running" `basename $f .r` "with rcc-run (heap alloc only)..."
	
	for (( i=0 ; $i < $N_TIMES ; i=$i+1 )) ; do R_ALWAYS_USE_FALLBACK_ALLOC=1 $TIMECMD rcc-run `basename $f .r` >  `basename $f .r`.compiled.fallback ; done
	echo "  running " `basename $f .r` "with rcc-run (local alloc)..." 
	for (( i=0 ; $i < $N_TIMES ; i=$i+1 )) ; do $TIMECMD rcc-run `basename $f .r` >  `basename $f .r`.compiled ; done
    fi
done
